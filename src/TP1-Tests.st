TestCase subclass: #AlgoPedidosTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test08RemoverCuponDeDescuentoAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Martin'.

	algoPedidos agregarCuponAPedidoDe: 'Martin' conValor: 15. 	
	algoPedidos agregarProductoConNombre: 'Pizza' precio: 350.0 yCantidad: 1 para: 'Martin'.
	
	self assert: (algoPedidos precioPedidoDe: 'Martin') closeTo: 335.0 precision: 0.01.  "-15"
	
	algoPedidos removerCuponDePedidoDe: 'Martin'.

	self assert: (algoPedidos precioPedidoDe: 'Martin') closeTo: 350.0 precision: 0.01.! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:17'!test02SeAgreganProductosAPedidoConDelivery
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Santiago'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Santiago'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Santiago'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Santiago') equals: (750*1.2). "20% extra"! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test07AgregarCuponAPedidoConMenuNoRealizaDescuento
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Julian'.

	algoPedidos agregarMenuConNombre: 'Menu jueves' precio: 200.0 yCantidad: 1 para: 'Julian'.
	algoPedidos agregarProductoConNombre: 'Ensalada' precio: 200.0 yCantidad: 2 para: 'Julian'.

	algoPedidos agregarCuponAPedidoDe: 'Julian' conValor: 15.
	
	self assert: (algoPedidos precioPedidoDe: 'Julian') equals: 600.0.! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:28'!test11SeAgreganProductosAPedidoConDeliveryYElUsuarioPedidoEsInconrrecto
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Santiago'.	algoPedidos crearPedidoConDeliveryPara: 'Tomas'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Santiago'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Tomas'.
	 
	self should: [ algoPedidos precioPedidoDe: 'Seba' ] raise:  UsuarioNoEncontradoError  ! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:27'!test10SeAgreganProductosAPedidoConDeliveryYElUsuarioPedidoEsInconrrecto
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Santiago'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Santiago'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Santiago'.
	 
	self should: [ algoPedidos precioPedidoDe: 'Seba' ] raise:  UsuarioNoEncontradoError  ! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:10'!test05SeCambiaCantidadDeProductosEnPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Carlos'.
	
	algoPedidos agregarMenuConNombre: 'Menú viernes' precio: 200.0 yCantidad: 1 para: 'Carlos'.
	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 250.0 yCantidad: 1 para: 'Carlos'.
	
	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Carlos') equals: 2.
	
	algoPedidos actualizarProductoConNombre: 'Gaseosa' conCantidad: 3 para: 'Carlos'.
	
	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Carlos') equals: 4.! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:17'!test01SeAgreganProductosAPedidoParaRetirar
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Eugenio'.
	
	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 250.0 yCantidad: 2 para: 'Eugenio'.
	algoPedidos agregarProductoConNombre: 'Gelatina' precio: 100.0 yCantidad: 1 para: 'Eugenio'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Eugenio') equals: 600.0.! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/3/2020 00:02'!test03SeAgregaMenuAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Pablo'.
	
	algoPedidos agregarMenuConNombre: 'Menú viernes' precio: 200.0 yCantidad: 1 para: 'Pablo'.
	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 250.0 yCantidad: 1 para: 'Pablo'.
	
	self assert: (algoPedidos precioPedidoDe: 'Pablo') closeTo: 450.0 precision: 0.1.! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:38'!test12SeAgreganProductosAPedidoConDeliveryYUnCuponConPorcentajeMayorAl100
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Santiago'.	algoPedidos crearPedidoConDeliveryPara: 'Tomás'.
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Santiago'.	algoPedidos agregarProductoConNombre: 'Ensalada' precio: 200.0 yCantidad: 1 para: 'Tomás'.	 
	self should: [algoPedidos agregarCuponAPedidoDe: 'Tomás' conPorcentaje: 120 ] raise:  PorcentajeNoDisponibleError   ! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test09RemoverProductosAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Sebas'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Sebas'.
	algoPedidos agregarMenuConNombre: 'Menú Lunes' precio: 200.0 yCantidad: 1 para: 'Sebas'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Sebas'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Sebas') equals: (950*1.2). "20% extra"
	
	algoPedidos removerProductoConNombre: 'vino' para: 'Sebas'.
	algoPedidos removerMenuConNombre: 'Menú Lunes' para: 'Sebas'.
	
	self assert: (algoPedidos precioPedidoDe: 'Sebas') equals: (500*1.2). "20% extra"! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:05'!test04AplicarCuponDeDescuentoPorcentualAPedidoConProductos
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Tomás'.
	
	algoPedidos agregarProductoConNombre: 'Ensalada' precio: 200.0 yCantidad: 1 para: 'Tomás'.
	algoPedidos agregarCuponAPedidoDe: 'Tomás' conPorcentaje: 10. 
	
	self assert: (algoPedidos precioPedidoDe: 'Tomás') closeTo: (200*0.9) precision: 0.01. "-10%"! !!AlgoPedidosTests methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test06AplicarCuponDeDescuentoFijoAPedidoConProductos
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Diego'.

	algoPedidos agregarCuponAPedidoDe: 'Diego' conValor: 15. 	
	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 350.0 yCantidad: 1 para: 'Diego'.
	
	self assert: (algoPedidos precioPedidoDe: 'Diego') closeTo: 335.0 precision: 0.01. "-15"! !TestCase subclass: #CuponActivoTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CuponActivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:24'!test02SeInstanciaUnCuponPorcentual	| cupon |	cupon := CuponActivo new.	cupon establecerPorcentual: 50.		self assert: (cupon aplicarCuponA: 100) equals:50 .! !!CuponActivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:24'!test01SeInstanciaUnCuponPorcentual	| cupon |	cupon := CuponActivo new.	cupon establecerPorcentual: 15.		self assert: (cupon aplicarCuponA: 100) equals: 15 .! !!CuponActivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:27'!test04SeInstanciaUnCuponFijo	| cupon |	cupon := CuponActivo new.	cupon establecerFijo: 20.		self assert: (200 - (cupon aplicarCuponA: 200)) equals:180 .! !!CuponActivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:27'!test03SeInstanciaUnCuponFijo	| cupon |	cupon := CuponActivo new.	cupon establecerFijo: 10.		self assert: (200 - (cupon aplicarCuponA: 200)) equals:190 .! !TestCase subclass: #CuponInactivoTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CuponInactivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:29'!test02SeInstanciaUnCuponPorcentual	| cupon |	cupon := CuponInactivo new.	cupon establecerPorcentual: 7.		self assert: (cupon aplicarCuponA: 100) equals: 0.! !!CuponInactivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:29'!test01SeInstanciaUnCuponPorcentual	| cupon |	cupon := CuponInactivo  new.	cupon establecerPorcentual: 15.		self assert: (cupon aplicarCuponA: 100) equals: 0.! !!CuponInactivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:29'!test03SeInstanciaUnCuponFijo	| cupon |	cupon := CuponInactivo new.	cupon establecerFijo: 7.		self assert: (cupon aplicarCuponA: 100) equals: 0.! !!CuponInactivoTests methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 14:29'!test04SeInstanciaUnCuponFijo	| cupon |	cupon := CuponInactivo new.	cupon establecerFijo: 100.		self assert: (cupon aplicarCuponA: 100) equals: 0.! !TestCase subclass: #DeliveryTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DeliveryTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:24'!test03SeCreaUnDeliveryConRecargaDe80	 | d | 		d := Delivery new.	d establecerAumento: 10.		self assert: (d aplicarAumento: 1000) equals: 100.! !!DeliveryTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:23'!test01SeCreaUnDeliveryConRecargaDe50	 | d | 		d := Delivery new.	d establecerAumento: 50.		self assert: (d aplicarAumento: 100) equals: 50.! !!DeliveryTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:23'!test02SeCreaUnDeliveryConRecargaDe80	 | d | 		d := Delivery new.	d establecerAumento: 80.		self assert: (d aplicarAumento: 100) equals: 80.! !TestCase subclass: #PedidoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:10'!test03SeCreaUnPedidoCon2MenusYseCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarMenu: (Producto conNombre: 'Menu-1' precio:10  yCantidad: 10).	pedido agregarMenu: (Producto conNombre: 'Menu-2' precio:5   yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 150.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:44'!test16SeCreaUnPedidoCon2ProductosYSeLoActualizaConCantidad0ParaLanzarLaExcepcion	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).				self should: [ pedido actualizarProductoConNombre: 'Sal'  conCantidad: 0 ] raise: PedidoConCeroError ! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:49'!test19SeCreaUnPedidoCon3ProductosYSeActualizaUnoQueNoExisteParaProbarLaExcepcion	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Yerba' precio:2  yCantidad: 10).			self should: [ pedido actualizarProductoConNombre: 'Limon'  conCantidad: 20 ] raise: ProductoNoEncontradoError.	self should: [ pedido actualizarProductoConNombre: 'Sal'  conCantidad: 20 ] raise: ProductoNoEncontradoError ! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 18:59'!test02SeCreaUnPedidoCon5ProductosYSeCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 210.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:25'!test08SeCreaUnPedidoCon5ProductosYSeCalculaLaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		self assert: (pedido cantidadDeProductos) equals: 50.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:23'!test05SeCreaUnPedidoCon3ProductosYunDescuentoFijoYseCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarCuponConValor: 10.	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon'  precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal'    precio:2   yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 50.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:01'!test14SeCreaUnPedidoCon5ProductosYSeLoActualizaSeCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		pedido actualizarProductoConNombre: 'Sal'  conCantidad: 2.		self assert: (pedido calcularPedido ) equals: 194.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 10/28/2020 12:30'!test01SeCreaUnPedidoCon5ProductosYSeCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 170.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:38'!test13SeCreaUnPedidoCon5ProductosLuegoSeAñadeUnDescuentoPorcentualYLuegoSeLoRemueve	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).			pedido agregarCuponConPorcentaje:  10.	self assert: (pedido calcularPedido ) equals:(210 * 0.9) .		pedido removerCupon .		self assert: (pedido calcularPedido) equals: 210.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:26'!test07SeCreaUnPedidoCon2ProductosYSeCalculaLaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).		self assert: (pedido cantidadDeProductos) equals: 20.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:23'!test06SeCreaUnPedidoCon3ProductosYunDescuentoPorcentualYseCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarCuponConPorcentaje: 50.	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon'  precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal'    precio:2   yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 30.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:38'!test12SeCreaUnPedidoCon5ProductosLuegoSeAñadeUnDescuentoYLuegoSeLoRemueve	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).			pedido agregarCuponConValor: 10.	self assert: (pedido calcularPedido ) equals:(200) .		pedido removerCupon .		self assert: (pedido calcularPedido) equals: 210.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:35'!test10SeCreaUnPedidoCon5ProductosYDosMenusLuegoSeAñadeUnDescuentoYSeCalculaLaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		pedido agregarMenu:     (Producto conNombre: 'Menu-1' precio:10  yCantidad: 17).	pedido agregarMenu:     (Producto conNombre: 'Menu-2' precio:5   yCantidad: 13).		pedido agregarCuponConPorcentaje: 50.		self assert: (pedido cantidadDeProductos) equals: 80.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:11'!test04SeCreaUnPedidoCon2MenusY3ProductosseCalculaElTotal	| pedido |		pedido := Pedido new.	pedido agregarMenu:     (Producto conNombre: 'Menu-1' precio:10  yCantidad: 10).	pedido agregarMenu:     (Producto conNombre: 'Menu-2' precio:5   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon'  precio:2   yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal'    precio:2   yCantidad: 10).		self assert: (pedido calcularPedido ) equals: 210.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:45'!test17SeCreaUnPedidoCon3ProductosYSeLoActualizaConCantidad0ParaLanzarLaExcepcion	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).				self should: [ pedido actualizarProductoConNombre: 'Sal'  conCantidad: 0 ] raise: PedidoConCeroError .	self should: [ pedido actualizarProductoConNombre: 'Azucar'  conCantidad: 0 ] raise: PedidoConCeroError ! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:35'!test11SeCreaUnPedidoCon5ProductosYDosMenusLuegoSeAñadeUnDescuentoYSeCalculaLaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		pedido agregarMenu:     (Producto conNombre: 'Menu-1' precio:10  yCantidad: 17).	pedido agregarMenu:     (Producto conNombre: 'Menu-2' precio:5   yCantidad: 13).		pedido agregarCuponConValor: 50.		self assert: (pedido cantidadDeProductos) equals: 80.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:11'!test15SeCreaUnPedidoCon5ProductosYSeLoActualizaSeCalculaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		pedido actualizarProductoConNombre: 'Sal'  conCantidad: 2.		self assert: (pedido cantidadDeProductos) equals: 42.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/1/2020 19:27'!test09SeCreaUnPedidoCon5ProductosYDosMenusSeCalculaLaCantidadDeProductos	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Limon' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).		pedido agregarMenu:     (Producto conNombre: 'Menu-1' precio:10  yCantidad: 17).	pedido agregarMenu:     (Producto conNombre: 'Menu-2' precio:5   yCantidad: 13).		self assert: (pedido cantidadDeProductos) equals: 80.! !!PedidoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:48'!test18SeCreaUnPedidoCon5ProductosYSeActualizaUnoQueNoExisteParaProbarLaExcepcion	| pedido |		pedido := Pedido new.	pedido agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Yerba' precio:2  yCantidad: 10).	pedido agregarProducto: (Producto conNombre: 'Sal' precio:2  yCantidad: 10).			self should: [ pedido actualizarProductoConNombre: 'Limon'  conCantidad: 20 ] raise: ProductoNoEncontradoError ! !TestCase subclass: #ProductoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!ProductoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:17'!test01SeInstanciaUnProducto	| producto |		producto := Producto conNombre: 'Sal' precio:10  yCantidad:3.		self assert: (producto nombre ) equals: 'Sal'. ! !!ProductoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:19'!test03SeInstanciaUnProductoYSeLePideElTotalLuegoSeCambiaLaCantidad	| producto |		producto := Producto conNombre: 'Sal' precio:10  yCantidad:3.		self assert: (producto precioFinal ) equals: 30.		producto establecerCantidad: 5.		self assert: (producto precioFinal ) equals: 50.		 ! !!ProductoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:17'!test02SeInstanciaUnProductoYSeLePideElTotal	| producto |		producto := Producto conNombre: 'Sal' precio:10  yCantidad:3.		self assert: (producto precioFinal  ) equals: 30. ! !!ProductoTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 19:21'!test04SeInstanciaUnProductoYSeLePideElTotalLuegoSeCambiaLaCantidad	| producto |		producto := Producto conNombre: 'Sal' precio:10  yCantidad:3.		self assert: (producto precioFinal ) equals: 30.		producto establecerCantidad: 600.		self assert: (producto cantidad ) equals: 600.		 ! !TestCase subclass: #UsuarioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:35'!test12SeCreaUnUsuarioPorDeliveryYSeLeProporciona3ProductosYDosMenusYSeLePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:20.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarMenu: (Producto conNombre: 'Menu-1' precio:5  yCantidad: 10).	usuario agregarMenu: (Producto conNombre: 'Menu-2' precio:5  yCantidad: 10).		self assert: (usuario realizarPago) equals:324. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:31'!test06SeCreaUnUsuarioYSeLeProporcionaProductosPorDeliverycon20PorcientoDeAumentoYUnCuponPorcentualDe20	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:50.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarCuponConPorcentaje: 20.		self assert: (usuario realizarPago ) equals:221. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/8/2020 09:40'!test16SeCreaUnUsuarioYSeLeProporcionaProductosPorDeliverycon20PorcientoDeAumentoYUnCuponPorcentualDe220ParaQueLaExcepcionSalte	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:50.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).				self should: [ usuario agregarCuponConPorcentaje: 210 ] raise: PorcentajeNoDisponibleError ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:36'!test13SeCreaUnUsuarioPorDeliveryYSeLeProporciona3ProductosYDosMenusYUnCuponFijoYSeLePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:20.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	usuario agregarCuponConValor: 30.		usuario agregarMenu: (Producto conNombre: 'Menu-1' precio:5  yCantidad: 10).	usuario agregarMenu: (Producto conNombre: 'Menu-2' precio:5  yCantidad: 10).		self assert: (usuario realizarPago) equals:324. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 10/28/2020 12:24'!test03SeCreaUnUsuarioYSeLeProporciona1Productocon10UnidadesYsePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 20).		self assert: (usuario realizarPago ) equals:200. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:31'!test05SeCreaUnUsuarioYSeLeProporcionaProductosPorDeliverycon50PorcientoDeAumento	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:50.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		self assert: (usuario realizarPago ) equals:255. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:31'!test08SeCreaUnUsuarioYSeLeProporcionaProductoconYUnCuponPorcentualDe20	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarCuponConPorcentaje: 20.		self assert: (usuario realizarPago ) equals:136. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:36'!test14SeCreaUnUsuarioPorDeliveryYSeLeProporciona3ProductosYDosMenusYUnCuponPrcentualYSeLePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:20.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).	usuario agregarCuponConPorcentaje: 30.		usuario agregarMenu: (Producto conNombre: 'Menu-1' precio:5  yCantidad: 10).	usuario agregarMenu: (Producto conNombre: 'Menu-2' precio:5  yCantidad: 10).		self assert: (usuario realizarPago) equals:324. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:31'!test07SeCreaUnUsuarioYSeLeProporcionaProductosPorDeliverycon20PorcientoDeAumentoYUnCuponFijoDe40	| usuario  |		usuario  := Usuario conNombre: 'Alejo' yRecargo:50.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarCuponConValor: 40.		self assert: (usuario realizarPago ) equals:215. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:28'!test09SeCreaUnUsuarioYSeLeProporciona1Productocon10UnidadesParaRetirarYUnCuponFijoDe70	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarCuponConValor: 70.		self assert: (usuario realizarPago ) equals:100. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 10/28/2020 12:25'!test04SeCreaUnUsuarioYSeLeProporciona3Productocon10UnidadesYsePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		self assert: (usuario realizarPago ) equals:170. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 10/28/2020 09:26'!test01SeCreaUnUsuarioPorMetodoDeClaseYseLePideElNombre	| usuario |		usuario  := Usuario conNombre: 'Alejo'.	self assert: (usuario nombre) equals: 'Alejo'. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 10/28/2020 09:47'!test02SeCreanDosUsuarioPorMetodoDeClaseYseLePideElNombre	| usuario1 usuario2 |		usuario1  := Usuario conNombre: 'Alejo'.	usuario2  := Usuario conNombre: 'Gael'.		self assert: (usuario1 nombre) equals: 'Alejo'.	self assert: (usuario2 nombre) equals: 'Gael'.  ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:34'!test11SeCreaUnUsuarioYSeLeProporciona3ProductosYDosMenusYSeLePideElTotal	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarMenu: (Producto conNombre: 'Menu-1' precio:5  yCantidad: 10).	usuario agregarMenu: (Producto conNombre: 'Menu-2' precio:5  yCantidad: 10).		self assert: (usuario realizarPago) equals:270. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/4/2020 12:30'!test10SeCreaUnUsuarioYSeLeProporciona4ProductoconUnidadesYSeLePideLaCantidadDeProductor	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).			self assert: (usuario cantidadDeProductos) equals:30. ! !!UsuarioTest methodsFor: 'tests' stamp: 'AlejoVillores 11/7/2020 18:40'!test15SeCreaUnUsuarioYSeLeProporcionaProductosYUnCuponPorcentualDe20LuegoModificaElPedido	| usuario  |		usuario  := Usuario conNombre: 'Alejo'.	usuario agregarProducto: (Producto conNombre: 'Agua' precio:10  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Leche' precio:5  yCantidad: 10).	usuario agregarProducto: (Producto conNombre: 'Azucar' precio:2  yCantidad: 10).		usuario agregarCuponConPorcentaje: 20.		usuario actualizarProductoConNombre: 'Agua'  conCantidad: 300.		self assert: (usuario realizarPago ) equals: 2456. ! !